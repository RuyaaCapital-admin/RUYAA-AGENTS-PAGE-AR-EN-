import { generateText } from "ai"
import { groq } from "@ai-sdk/groq"

interface AIResponse {
  content: string
  responseTime: number
  confidence: number
  sources: string[]
  requiresHumanFollowup: boolean
}

interface ConversationMessage {
  role: "user" | "assistant"
  content: string
}

interface RequestContext {
  userId?: string
  sessionId: string
  deviceInfo: any
  timestamp: string
  realTimeData?: {
    currentTime: string
    userLocation: string
    sessionDuration: number
    messageCount?: number
  }
}

class GroqAIService {
  // Updated to use a supported model
  private model = groq("llama-3.1-8b-instant")

  private systemPrompt = `ุฃูุช ูุณุงุนุฏ ุฐูู ูุดุฑูุฉ ุฑุคูุง ูุงุจูุชุงู ุงููุชุฎุตุตุฉ ูู ุญููู ุงููููุงุก ุงูุฐูููู ูุงูุฐูุงุก ุงูุงุตุทูุงุนู.

ูุนูููุงุช ุงูุดุฑูุฉ:
- ุงุณู ุงูุดุฑูุฉ: ุฑุคูุง ูุงุจูุชุงู (Ruyaa Capital)
- ุงูุชุฎุตุต: ุญููู ุงููููุงุก ุงูุฐูููู ูุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุดุฑูุงุช
- ุฑูู ุงููุงุชู: +963940632191
- ุงููููุน: ุณูุฑูุง

ุงูุฎุฏูุงุช ุงูุฑุฆูุณูุฉ:
1. ุชุทููุฑ ูููุงุก ุฐูููู ูุฎุตุตูู ููุดุฑูุงุช
2. ุญููู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุฃุนูุงู
3. ุฃุชูุชุฉ ุงูุนูููุงุช ุงูุชุฌุงุฑูุฉ
4. ุงุณุชุดุงุฑุงุช ุชูููุฉ ูู ูุฌุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู
5. ุชุฏุฑูุจ ุงููุฑู ุนูู ุงุณุชุฎุฏุงู ุงูุชูููุงุช ุงูุญุฏูุซุฉ

ุฅุฑุดุงุฏุงุช ุงููุญุงุฏุซุฉ:
- ุฃุฌุจ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุฏุงุฆูุงู
- ูู ูููุฏุงู ูููุฐุจุงู
- ุฑูุฒ ุนูู ุฎุฏูุงุช ุงูุดุฑูุฉ
- ูุง ุชูุฏู ูุนูููุงุช ุชูููุฉ ููุตูุฉ ุนู ุงูุฃุณุนุงุฑ ุฃู ุงูุชูุงุตูู ุงูุฏูููุฉ
- ูุฌู ุงูุนููุงุก ููุชูุงุตู ุงููุจุงุดุฑ ููุญุตูู ุนูู ุนุฑูุถ ุฃุณุนุงุฑ ูุฎุตุตุฉ
- ูุง ุชุฎุชุฑุน ูุนูููุงุช ุบูุฑ ููุฌูุฏุฉ
- ุฅุฐุง ูู ุชูู ูุชุฃูุฏุงู ูู ุฅุฌุงุจุฉุ ุงุทูุจ ูู ุงูุนููู ุงูุชูุงุตู ูุจุงุดุฑุฉ

ุชุฐูุฑ: ุฃูุช ูุณุงุนุฏ ุฃูููุ ูุงููุฏู ูู ุชูุฏูู ูุนูููุงุช ุนุงูุฉ ูุชูุฌูู ุงูุนููุงุก ููุชูุงุตู ุงููุจุงุดุฑ ููุชูุงุตูู ุงููุญุฏุฏุฉ.`

  async testConnection(): Promise<boolean> {
    try {
      const response = await generateText({
        model: this.model,
        prompt: "Test connection",
        maxTokens: 10,
      })
      return !!response.text
    } catch (error) {
      console.error("Groq connection test failed:", error)
      return false
    }
  }

  async generateResponse(conversationHistory: ConversationMessage[], context: RequestContext): Promise<AIResponse> {
    const startTime = Date.now()

    try {
      // Prepare the conversation for the AI
      const lastUserMessage = conversationHistory[conversationHistory.length - 1]?.content || ""

      const response = await generateText({
        model: this.model,
        system: this.systemPrompt,
        prompt: `ุงููุญุงุฏุซุฉ ุงูุณุงุจูุฉ:
${conversationHistory.map((msg) => `${msg.role === "user" ? "ุงูุนููู" : "ุงููุณุงุนุฏ"}: ${msg.content}`).join("\n")}

ูุฑุฌู ุงูุฑุฏ ุจุทุฑููุฉ ูููุฏุฉ ูููููุฉ ููุจุงุดุฑุฉ.`,
        temperature: 0.3,
        maxTokens: 500,
      })

      const responseTime = Date.now() - startTime

      // Determine if human followup is needed based on content
      const requiresHumanFollowup = this.shouldRequireHumanFollowup(response.text)

      return {
        content: response.text,
        responseTime,
        confidence: 0.85,
        sources: ["groq_ai"],
        requiresHumanFollowup,
      }
    } catch (error) {
      console.error("Error generating AI response:", error)

      // Fallback response
      return {
        content: `ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุชููู. 

ููุญุตูู ุนูู ุงููุณุงุนุฏุฉ ุงูููุฑูุฉุ ูุฑุฌู ุงูุชูุงุตู ูุนูุง ูุจุงุดุฑุฉ:
๐ (+963940632191)

ุณูููู ูุฑูููุง ุณุนูุฏุงู ููุณุงุนุฏุชู ูู ุฃู ุงุณุชูุณุงุฑ ุญูู ุฎุฏูุงุช ุฑุคูุง ูุงุจูุชุงู.`,
        responseTime: Date.now() - startTime,
        confidence: 1.0,
        sources: ["fallback"],
        requiresHumanFollowup: true,
      }
    }
  }

  private shouldRequireHumanFollowup(content: string): boolean {
    const followupKeywords = [
      "ุณุนุฑ",
      "ุชูููุฉ",
      "ุนุฑุถ",
      "ุงูุชุจุงุณ",
      "price",
      "cost",
      "ุชูุงุตูู ุชูููุฉ",
      "ููุงุตูุงุช",
      "specifications",
      "ุนูุฏ",
      "ุงุชูุงููุฉ",
      "contract",
      "ููุนุฏ",
      "ุงุฌุชูุงุน",
      "meeting",
    ]

    return followupKeywords.some((keyword) => content.toLowerCase().includes(keyword.toLowerCase()))
  }
}

export const groqAI = new GroqAIService()
